{"version":3,"sources":["components/RenderedList.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["RenderedLists","itemBeingDragged","i","this","index","value","props","items","dropZone","draggedIndex","draggedVal","arr","isChecked","newLabel","label","splice","push","updateList","update","renderedItems","map","item","checked","disabled","className","key","draggable","onDragStart","setDraggedItem","onDragOver","e","preventDefault","onDragEnter","dragEnter","onDrop","resetDraggedItem","contentEditable","type","onChange","editItem","target","checkItem","onClick","removeItem","listTitle","updateTitle","removeList","id","newItem","React","Component","TodoList","state","listTitles","lists","titles","setState","updatedList","newTitle","renderedLists","list","RenderedList","newList","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b6372e3a.chunk.js","sourcesContent":["import React from 'react';\n\nclass RenderedLists extends React.Component {\n\n\titemBeingDragged = null;\n\n\tsetDraggedItem(i) {\n\t\tthis.itemBeingDragged = { \n\t\t\tindex: i, \n\t\t\tvalue: this.props.items[i]\n\t\t};\n\t}\n\n\tresetDraggedItem(){\n\t\tthis.itemBeingDragged = null;\n\t}\n\n\tdragEnter( dropZone ) {\n\t\tlet draggedIndex = this.itemBeingDragged.index;\n\t\tlet draggedVal = this.itemBeingDragged.value;\n\t\tlet arr = [...this.props.items];\n\n\t\tif( draggedIndex === dropZone )\n\t\t\treturn arr;\n\n\t\tif( draggedIndex > dropZone ){ \n\t\t\tarr[dropZone + 1] = arr[dropZone];\n\t\t\tarr[dropZone] = draggedVal;\t\n\t\t}else{\n\t\t\tarr[dropZone - 1] = arr[dropZone];\n\t\t\tarr[dropZone] = draggedVal;\n\t\t}\n\t\tthis.itemBeingDragged.index = dropZone;\n\t\treturn arr;\n\t}\n\n\tcheckItem( i ) {\n\t\tlet arr = [...this.props.items];\n\t\tarr[i].isChecked = !arr[i].isChecked;\n\t\treturn arr;\n\t}\n\n\teditItem( i, newLabel ) {\n\t\tlet arr = [...this.props.items];\n\t\tarr[i].label = newLabel;\n\t\treturn arr;\n\t}\n\n\tremoveItem( i ) {\n\t\tlet arr = [...this.props.items];\n\t\tarr.splice( i, 1 );\n\t\treturn arr;\n\t}\n\n\tnewItem(){\n\t\tlet arr = [...this.props.items];\n\t\tarr.push( { label:'A new thing', isChecked: false } )\n\t\treturn arr;\n\t}\n\t\n\trender() {\n\t\tlet updateList = this.props.update;\n\t\tlet renderedItems = this.props.items.map(( item, index ) => {\n\n\t\t\tlet checked = item.isChecked ? 'checked' : '';\n\t\t\tlet disabled = item.isChecked ? 'disabled' : '';\n\n\t\t\treturn (\n\t\t\t\t<li className={ checked }\n\t\t\t\t\tkey={ index }\n\t\t\t\t\tdraggable='true'\n\t\t\t\t\tonDragStart={ () => { this.setDraggedItem( index ) }}\n\t\t\t\t\tonDragOver={ (e) => { e.preventDefault() }}\n\t\t\t\t\tonDragEnter={ ()=>{ updateList( this.dragEnter( index )) }}\n\t\t\t\t\tonDrop={ ()=> { this.resetDraggedItem() } }\n\t\t\t\t>\n\t\t\t\t\n\t\t\t\t\t<div contentEditable={ disabled }\n\t\t\t\t\t\tclassName='item-label-input'\n\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\tonChange={ (e) => { updateList( this.editItem( index, e.target.value )) }}\n\t\t\t\t\t>{ item.label }</div>\n\t\t\t\t\t<div className=\"item-controls\">\n\t\t\t\t\t\t<input type='checkbox'\n\t\t\t\t\t\t\tonChange={ () => { updateList( this.checkItem( index ) ) }}\n\t\t\t\t\t\t\tchecked={ checked }\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<div className='remove-item'\n\t\t\t\t\t\t\tonClick={ () => { updateList( this.removeItem( index )) }}\n\t\t\t\t\t\t>&times;</div>\n\t\t\t\t\t</div>\n\t\t\t\t</li >\n\t\t\t)\n\t\t})\n\n\t\treturn (\n\t\t\t<div className='todo-list-cont'>\n\t\t\t\t\n\t\t\t\t<div className=\"card-controls\">\n\t\t\t\t\t<input \n\t\t\t\t\t\tclassName='search' \n\t\t\t\t\t\tvalue={ this.props.listTitle } \n\t\t\t\t\t\ttype='text' \n\t\t\t\t\t\tonChange={ (e)=>{ this.props.updateTitle( e.target.value ) }}\n\t\t\t\t\t/>\n\t\t\t\t\t<div className='close-card-button'\n\t\t\t\t\t\tonClick={ () => { this.props.removeList( this.props.id ) }}>\n\t\t\t\t\t\t\t&times;\n\t\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className='item-list'>\n\t\t\t\t\t{ renderedItems }\n\t\t\t\t</div>\n\n\t\t\t\t<li className='new-item'>\n\t\t\t\t\t<div className='item-label-input'\n\t\t\t\t\t\tonClick={ ()=> { updateList( this.newItem() ) }}\n\t\t\t\t\t>+</div>\n\t\t\t\t</li>\n\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default RenderedLists;","import React from 'react';\nimport RenderedList from './RenderedList'\n\nclass TodoList extends React.Component {\n\tconstructor( props ) {\n\t\tsuper( props );\n\t\tthis.state = {\n\t\t\tlistTitles:[\n\t\t\t\t'Things I Must Do'\n\t\t\t],\n\t\t\tlists: [\n\t\t\t\t[\n\t\t\t\t\t{ \n\t\t\t\t\t\tlabel: 'That one thing',\n\t\t\t\t\t\tisChecked: false,\n\t\t\t\t\t}, {\n\t\t\t\t\t\tlabel: 'Make some React components',\n\t\t\t\t\t\tisChecked: true,\n\t\t\t\t\t}, {\n\t\t\t\t\t\tlabel: 'Understand the meaning of reality',\n\t\t\t\t\t\tisChecked: false,\n\t\t\t\t\t}, {\n\t\t\t\t\t\tlabel: 'Survive',\n\t\t\t\t\t\tisChecked: false,\n\t\t\t\t\t}, {\n\t\t\t\t\t\tlabel: 'Be good',\n\t\t\t\t\t\tisChecked: true,\n\t\t\t\t\t}\n\t\t\t\t]\t\t\t\n\t\t\t]\n\t\t}\n\t}\n\n\tnewList() {\n\t\tlet arr = [...this.state.lists];\n\t\tlet titles = [...this.state.listTitles];\n\t\ttitles.push( [\n\t\t\t'An Amazing New List'\n\t\t])\n\t\tarr.push( [{ \n\t\t\tlabel: 'A New Thing',\n\t\t\tisChecked: false \n\t\t}] );\n\t\tthis.setState( ()=>{\n\t\t\treturn { lists: arr, listTitles: titles }\n\t\t});\n\t}\n\n\tremoveList( i ){\n\t\tlet arr =[...this.state.lists];\n\t\tlet titles=[...this.state.listTitles];\n\t\tarr.splice( i, 1 );\n\t\ttitles.splice( i, 1 )\n\t\tthis.setState( () => {\n\t\t\treturn { lists: arr, listTitles: titles };\n\t\t});\n\t}\n\n\tupdateList( updatedList, i = false ){\n\t\tlet arr = [...this.state.lists];\n\t\tarr[i] = updatedList;\n\t\n\t\tthis.setState( () => {\n\t\t\treturn { lists: arr };\n\t\t});\n\t}\n\t\n\tupdateTitle( newTitle, i ){\n\t\tlet arr = [...this.state.listTitles];\n\t\tarr[i] = newTitle;\n\t\tthis.setState(()=>{\n\t\t\treturn { listTitles: arr }\n\t\t});\n\t}\n\t\n\trender() {\n\n\t\tlet renderedLists = this.state.lists.map(( list, index ) => {\n\t\t\treturn ( \n\t\t\t\t<RenderedList \n\t\t\t\t\tlistTitle={ this.state.listTitles[index] }\n\t\t\t\t\titems={ list } \n\t\t\t\t\tid={ index }\n\t\t\t\t\tkey={ index } \n\t\t\t\t\tupdate={ ( updatedList ) => { this.updateList( updatedList, index ) }}\n\t\t\t\t\tremoveList={ ( i ) => { this.removeList( i ) } }\n\t\t\t\t\tupdateTitle={ ( newTitle ) => { this.updateTitle( newTitle, index ) } }\n\t\t\t\t/> );\n\t\t})\n\n\t\treturn (\n\t\t\t<div className=\"todo-lists\">\n\t\t\t\t{ renderedLists }\n\t\t\t\t<div className=\"add-list-cont\"\n\t\t\t\t\tonClick={ ()=>{\n\t\t\t\t\t\tthis.newList();\n\t\t\t\t\t}}>\n\t\t\t\t\t<div className=\"todo-list-cont add-list\">+</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default TodoList;","import React from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<h1>Obligatory Todo App</h1>\n\t\t\t<TodoList />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}